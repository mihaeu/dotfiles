#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

DOTFILES_DIR="$HOME/dotfiles"
source "$DOTFILES_DIR/scripts/helpers"

function ensureZshIsDefaultShell() {
    _info "Checking if zsh is the default shell ..."
    if ! grep zsh /etc/shells >/dev/null; then
        which zsh | sudo tee -a /etc/shells
    fi
    if ! grep "$(whoami)" /etc/passwd | grep zsh > /dev/null; then
        _info "Adding zsh to shells and set as default ..."
        sudo chsh -s "$(which zsh)"
    else
        _success "zsh is already the default"
    fi
}

function installOrUpdateOhMyZsh() {
      if [[ -d "$HOME/.oh-my-zsh/.git" ]]; then
        _info "Updating oh-my-zsh ..."
        git --git-dir="$HOME/.oh-my-zsh/.git" --work-tree="$HOME/.oh-my-zsh" pull
      elif [[ -d "$HOME/.oh-my-zsh" ]]; then
          _fail ".oh-my-zsh directory exists, but is not a git directory ..."
      else
         _info "Installing oh-my-zsh ..."
        curl https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
      fi
}

function ensurePatchedFontsAreInstalled() {
    _info "Installing patched fonts ..."
    FONT_DIR="$HOME/.oh-my-zsh/custom/themes/patched-fonts"
    if [[ ! -d "$FONT_DIR" ]]; then
        git clone "https://github.com/ryanoasis/nerd-fonts.git" "$FONT_DIR"
        "$HOME/.oh-my-zsh/custom/themes/patched-fonts/install.sh" || true
    else
        git --git-dir="$FONT_DIR/.git" pull
    fi
}

function linkBinaries() {
    _info "Linking binaries ..."
    mkdir -p "$HOME/bin"
    for bin in ${DOTFILES_DIR}/bin/*
    do
        ln -sf "${bin}" "${HOME}/bin"
    done
    ln -sf "${DOTFILES_DIR}/scripts/*(.)" $HOME/bin
}

function linkDotfiles() {
    _info "Linking dotfiles ..."
    for config in ${DOTFILES_DIR}/.config/*;
    do
        [[ ! -L "$config" ]] || ln -s "$config" "$HOME/.config"
    done

    [[ -L "${DOTFILES_DIR}/.todo" ]] || ln -sf "${DOTFILES_DIR}/.todo" "${HOME}"
    [[ -L "${DOTFILES_DIR}/.zshrc" ]] || ln -sf "${DOTFILES_DIR}/.zshrc" "${HOME}"
    [[ -L "${DOTFILES_DIR}/.gitconfig" ]] || ln -sf "${DOTFILES_DIR}/.gitconfig" "${HOME}"
}

function pullOrUpdateGitDependency() {
    REPO_URL="${1}"
    REPO_DIR="${2}"
    if [[ -d "$REPO_DIR" ]]; then
        _info "Updating ${REPO_DIR} ..."
        git --git-dir="$REPO_DIR/.git" --work-tree="$REPO_DIR" pull
      else
          _info "Pulling from ${REPO_URL} ..."
        git clone "$REPO_URL" "$REPO_DIR"
      fi
}

function installOrUpdateComposerDependencies() {
    _error "installOrUpdateComposerDependencies not yet implemented"
}

function installOrUpdatePhpDependencies() {
    _info "Installing PHP dependencies ..."
    if ! type php >/dev/null; then
        curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer | bash
        local -r LATEST_VERSION="$(phpenv install --list | ag '^ +\d\.\d+\.\d+$' | tail -n1)"
        phpenv install --ini development "${LATEST_VERSION}"
    fi
    installOrUpdateComposerDependencies
}

function installOrUpdateNodeDependencies() {
    _info "Installing node dependencies ..."
    if ! type node >/dev/null 2>&1; then
        mkdir -p "$HOME/.nvm"
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
        nvm install --lts
    fi
}

function installOrUpdateRubyDependencies() {
    _info "Installing ruby dependencies ..."
    if ! type ruby >/dev/null; then
        curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer | bash
        local -r LATEST_VERSION="$(rbenv install --list | ag '^ +\d\.\d+\.\d+$' | tail -n1)"
        rbenv install -s "${LATEST_VERSION}"
    fi
}

function installOrUpdatePythonDependencies() {
    _error "installOrUpdatePythonDependencies not yet implemented"
}

function installOrUpdateRustDependencies() {
    _info "Installing rust dependencies ..."
    if ! type cargo >/dev/null; then
        curl https://sh.rustup.rs -sSf | sh
    fi

    cargoInstall exa
    cargoInstall fd-find fd
    cargoInstall bat
    cargoInstall ripgrep rg
}

function cargoInstall() {
    RUST_NAME=${1}
    BINARY_NAME=${2:-$RUST_NAME}
    if ! type "$BINARY_NAME" >/dev/null 2>&1; then
        cargo install "$RUST_NAME" || true
    fi
}

function installOrUpdateGoDependencies() {
    _error "installOrUpdateGoDependencies not yet implemented"
}

function installUbuntuDependencies() {
    _info "Installing/updating ubuntu dependencies ..."
    sudo apt update
    sudo apt install -y $(cat $DOTFILES_DIR/ubuntu-dependencies | xargs) \
        | grep -v "is already the newest version"
}

function installMisc() {
    # fzf
    if [[ ! -d "${HOME}/.fzf" ]]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git "${HOME}/.fzf"
        ~/.fzf/install
    fi
}

function cloneCompileAndInstallXkblayoutState() {
    if type xkblayout-state >/dev/null; then
        return
    fi

    git clone "https://github.com/nonpop/xkblayout-state" /tmp/xkblayout-state
    pushd "$_"
    make
    sudo make install
    if ! type xkblayout-state >/dev/null; then
        _fail "Failed compiling xkblayout-state" 3
    fi
}

function main() {

    _info '   _____  .__ __        /\         ________          __    _____.__.__                 '
    _info '  /     \ |__|  | __ ___)/  ______ \______ \   _____/  |__/ ____\__|  |   ____   ______'
    _info ' /  \ /  \|  |  |/ // __ \ /  ___/  |    |  \ /  _ \   __\   __\|  |  | _/ __ \ /  ___/'
    _info '/    Y    \  |    <\  ___/ \___ \   |    `   (  <_> )  |  |  |  |  |  |_\  ___/ \___ \ '
    _info '\____|__  /__|__|_ \\___  >____  > /_______  /\____/|__|  |__|  |__|____/\___  >____  >'
    _info '        \/        \/    \/     \/          \/                                \/     \/ '
    echo

    installUbuntuDependencies
    pullOrUpdateGitDependency "https://github.com/mihaeu/dotfiles" "$DOTFILES_DIR"
    cd "$DOTFILES_DIR"
    ensureZshIsDefaultShell
    installOrUpdateOhMyZsh
    ensurePatchedFontsAreInstalled
    pullOrUpdateGitDependency "https://github.com/bhilburn/powerlevel9k" "$HOME/.oh-my-zsh/custom/themes/powerlevel9k"
    pullOrUpdateGitDependency "https://github.com/zsh-users/zsh-syntax-highlighting"  "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    linkBinaries
    linkDotfiles
    installMisc
    cloneCompileAndInstallXkblayoutState
    installOrUpdateRustDependencies
    installOrUpdatePhpDependencies
    installOrUpdateNodeDependencies
    installOrUpdateRubyDependencies
    installOrUpdatePythonDependencies
    installOrUpdateGoDependencies

    _success "==================================================="
    _success "= All done, time to switch over to zsh/terminator ="
    _success "==================================================="
}

main
